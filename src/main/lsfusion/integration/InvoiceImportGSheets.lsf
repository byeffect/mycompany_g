MODULE InvoiceImportGSheets;

REQUIRE ShipmentImportGSheets, Invoice, SalesLedgerAccountInvoice;

NAMESPACE Invoicing;

customerReference '{Customer_reference}' = DATA STRING[30] (InvoiceLine) INDEXED;

EXTEND FORM invoice
    PROPERTIES(l) READONLYIF readonly(i) customerReference
;

amazonInvoiceType = DATA InvoiceType ();
nameAmazonInvoiceType 'Тип реализации для Амазон' = name(amazonInvoiceType());

//импорт реализации с Амазон
activeImportInvoiceAmazon '{Active}' = DATA BOOLEAN (Country);
idImportInvoiceAmazon 'ID таблицы' = DATA STRING (Country) CHARWIDTH 40;
typeImportInvoiceAmazon 'Тип зказа' = DATA STRING (Country) CHARWIDTH 20;

CONSTRAINT (SET(activeImportInvoiceAmazon(Country c)) OR CHANGED( idImportInvoiceAmazon(c)) OR CHANGED(typeImportInvoiceAmazon(c)))
    AND activeImportInvoiceAmazon(c) AND NOT (idImportInvoiceAmazon(c) AND typeImportInvoiceAmazon(c))
    MESSAGE 'Не заполнены ID таблицы и Тип зказа';

importInvoiceAmazon 'Импорт реализации с Амазон' (Country c, DATE date) {
    NEWSESSION {
        getValuesRange(idImportInvoiceAmazon(c), 'SKU!A2:B', defaultAccount());
        valuesRows(INTEGER i) <- replace(replace(replace(replace(valuesRows(i), ';', ''), '[', ''), ']', ''), '",', '";');
        LOCAL str = STRING();
        str() <- GROUP CONCAT valuesRows(INTEGER i), '\n' ORDER i;
        stringToFile(str());

        LOCAL amzModel = STRING(INTEGER);
        LOCAL baseModel = STRING(INTEGER);
        
        IMPORT CSV ';' NOHEADER FROM resultFile() TO amzModel, baseModel;
        
        LOCAL dateTime = DATETIME(INTEGER);
        LOCAL type = STRING(INTEGER);
        LOCAL reference = STRING(INTEGER);
        LOCAL model = STRING(INTEGER);
        LOCAL quantity = NUMERIC[16,3](INTEGER);
        LOCAL productSales = NUMERIC[14,2](INTEGER);
        LOCAL productSalesTax = NUMERIC[14,2](INTEGER);
        LOCAL postageCredits = NUMERIC[14,2](INTEGER);
        LOCAL shippingCreditsTax = NUMERIC[14,2](INTEGER);
        LOCAL giftWrapCredits = NUMERIC[14,2](INTEGER);
        LOCAL giftwrapCreditsTax = NUMERIC[14,2](INTEGER);
        LOCAL promotionalRebates = NUMERIC[14,2](INTEGER);
        LOCAL promotionalRebatesTax = NUMERIC[14,2](INTEGER);
        LOCAL marketplaceWithheldTax = NUMERIC[14,2](INTEGER);
        LOCAL sellingFees = NUMERIC[14,2](INTEGER);
        LOCAL fbaFees = NUMERIC[14,2](INTEGER);
        LOCAL otherTransactionFees = NUMERIC[14,2](INTEGER);
        LOCAL other = NUMERIC[14,2](INTEGER);
        LOCAL total = NUMERIC[14,2](INTEGER);
        LOCAL item = Item(INTEGER);
        LOCAL index = INTEGER(INTEGER);
        
        getValuesRange(idImportInvoiceAmazon(c), lpad(STRING(extractMonthNumber(date)),2,'0') + '!A9:AA', defaultAccount());
        valuesRows(INTEGER i) <- replace(replace(replace(replace(replace(valuesRows(i), ';', ''), '[', ''), ']', ''), '",', ';'), '"', '');
        str() <- GROUP CONCAT valuesRows(INTEGER i), '\n' ORDER i;
        stringToFile(str());
        
        IMPORT CSV ';' NOHEADER FROM resultFile() TO dateTime = A, type = C, reference = D, model = E, quantity = G,
                                                     productSales = N, productSalesTax = O, postageCredits = P,
                                                     shippingCreditsTax = Q, giftWrapCredits = R, giftwrapCreditsTax = S,
                                                     promotionalRebates = T, promotionalRebatesTax = U,
                                                     marketplaceWithheldTax = V, sellingFees = W, fbaFees = X,
                                                     otherTransactionFees = Y, other = Z, total = AA;
        
        item(INTEGER i) <- productModel((GROUP MAX baseModel(INTEGER j) IF amzModel(j) == model(i))) IF type(i) == typeImportInvoiceAmazon(c) AND DATE(dateTime(i)) == date;
        index(INTEGER i) <- PARTITION SUM 1 ORDER i BY reference(i), item(i);
        
        IF NOT (GROUP MAX Invoice i IF date(i) == date AND type(i) == amazonInvoiceType() AND customer(i) == FBAPartner()) THEN NEW i = Invoice {
            dateTime(i) <- dateTimeToDateTime(date, TIME('23:59:59'));
            type(i) <- amazonInvoiceType();
            customer(i) <- FBAPartner();
            //status(i) <- InvoiceStatus.draft;
        }
        FOR Invoice i == (GROUP LAST Invoice ii IF date(ii) == date AND type(ii) == amazonInvoiceType() AND customer(ii) == FBAPartner() AND status(ii) == InvoiceStatus.draft ORDER dateTime(ii), ii) DO {
            LOCAL part = INTEGER(InvoiceLine);
            part(InvoiceLine l) <- PARTITION SUM 1 IF invoice(l) == i ORDER index(l), l BY invoice(l), customerReference(l), item(l);

            FOR [GROUP MAX INTEGER j BY reference(j), item(j), index(j)](STRING[30] ref, Item item, INTEGER index) AND NOT [GROUP MAX InvoiceLine l IF invoice(l) == i BY customerReference(l), item(l), part(l)](ref,item,index) NEW l = InvoiceLine DO {
                invoice(l) <- i;
                customerReference(l) <- ref;
                item(l) <- item;
                part(l) <- index;
            }
            
            FOR INTEGER x = [GROUP MAX INTEGER j BY reference(j), item(j), index(j)](STRING[30] ref, Item item, INTEGER index) AND InvoiceLine il == [GROUP MAX InvoiceLine l IF invoice(l) == i BY customerReference(l), item(l), part(l)](ref,item,index) DO {
                quantity(il) <- quantity(x);
                untaxedAmount(il) <- total(x);
                price(il) <- NUMERIC[10,2](total(x)/quantity(x));
                
                in(il, Tax tt) <- NULL;
                taxAmount(Tax tt, il) <- NULL;
                IF productSalesTax(x) > 0 OR productSalesTax(x) < 0 THEN {
                    in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог на продажу товаров';
                    taxAmount(Tax tt, il) <- productSalesTax(x) WHERE name(tt) == 'Налог на продажу товаров';
                }
                IF shippingCreditsTax(x) > 0 OR shippingCreditsTax(x) < 0 THEN {
                    in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог на кредит на доставку';
                    taxAmount(Tax tt, il) <- shippingCreditsTax(x) WHERE name(tt) == 'Налог на кредит на доставку';
                }
                IF giftwrapCreditsTax(x) > 0 OR giftwrapCreditsTax(x) < 0 THEN {
                    in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог на подарочную упаковку';
                    taxAmount(Tax tt, il) <- giftwrapCreditsTax(x) WHERE name(tt) == 'Налог на подарочную упаковку';
                }
                IF promotionalRebatesTax(x) > 0 OR promotionalRebatesTax(x) < 0 THEN {
                    in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог на рекламные скидки';
                    taxAmount(Tax tt, il) <- promotionalRebatesTax(x) WHERE name(tt) == 'Налог на рекламные скидки';
                }
                IF marketplaceWithheldTax(x) > 0 OR marketplaceWithheldTax(x) < 0 THEN {
                    in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог, удерживаемый на рынке';
                    taxAmount(Tax tt, il) <- marketplaceWithheldTax(x) WHERE name(tt) == 'Налог, удерживаемый на рынке';
                }

                dataAmount(il, CustomSalesAccount aa) <- NULL;
                IF postageCredits(x) > 0 OR postageCredits(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- postageCredits(x) WHERE id(aa) == 'postage_credits';
                }
                IF giftWrapCredits(x) > 0 OR giftWrapCredits(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- giftWrapCredits(x) WHERE id(aa) == 'gift_wrap_credits';
                }
                IF promotionalRebates(x) > 0 OR promotionalRebates(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- promotionalRebates(x) WHERE id(aa) == 'promotional_rebates';
                }
                IF sellingFees(x) > 0 OR sellingFees(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- sellingFees(x) WHERE id(aa) == 'selling_fees';
                }
                IF fbaFees(x) > 0 OR fbaFees(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- fbaFees(x) WHERE id(aa) == 'fba_fees';
                }
                IF otherTransactionFees(x) > 0 OR otherTransactionFees(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- otherTransactionFees(x) WHERE id(aa) == 'other_transaction_fees';
                }
                IF other(x) > 0 OR other(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- other(x) WHERE id(aa) == 'other';
                }
            }

            FOR DATE nextDate = sum(date,1) AND lastDayOfMonth(date) == date DO {
                getValuesRange(idImportInvoiceAmazon(c), lpad(STRING(extractMonthNumber(nextDate)),2,'0') + '!A9:AA', defaultAccount());
                valuesRows(INTEGER ii) <- replace(replace(replace(replace(replace(valuesRows(ii), ';', ''), '[', ''), ']', ''), '",', ';'), '"', '');
                str() <- GROUP CONCAT valuesRows(INTEGER j), '\n' ORDER i;
                stringToFile(str());

                IMPORT CSV ';' NOHEADER FROM resultFile() TO dateTime = A, type = C, reference = D, model = E, quantity = G,
                                                             productSales = N, productSalesTax = O, postageCredits = P,
                                                             shippingCreditsTax = Q, giftWrapCredits = R, giftwrapCreditsTax = S,
                                                             promotionalRebates = T, promotionalRebatesTax = U,
                                                             marketplaceWithheldTax = V, sellingFees = W, fbaFees = X,
                                                             otherTransactionFees = Y, other = Z, total = AA;

                item(INTEGER ii) <- productModel((GROUP MAX baseModel(INTEGER j) IF amzModel(j) == model(ii))) IF type(ii) == typeImportInvoiceAmazon(c) AND DATE(dateTime(ii)) == date;
                index(INTEGER ii) <- PARTITION SUM 1 ORDER ii BY reference(ii), item(ii);

                FOR [GROUP MAX INTEGER j BY reference(j), item(j), index(j)](STRING[30] ref, Item item, INTEGER index) AND NOT [GROUP MAX InvoiceLine l IF invoice(l) == i BY customerReference(l), item(l), part(l)](ref,item,index) NEW l = InvoiceLine DO {
                    invoice(l) <- i;
                    customerReference(l) <- ref;
                    item(l) <- item;
                    part(l) <- index;
                }

                FOR INTEGER x = [GROUP MAX INTEGER j BY reference(j), item(j), index(j)](STRING[30] ref, Item item, INTEGER index) AND InvoiceLine il == [GROUP MAX InvoiceLine l IF invoice(l) == i BY customerReference(l), item(l), part(l)](ref,item,index) DO {
                    quantity(il) <- quantity(x);
                    untaxedAmount(il) <- total(x);
                    price(il) <- NUMERIC[10,2](total(x)/quantity(x));

                    in(il, Tax tt) <- NULL;
                    taxAmount(Tax tt, il) <- NULL;
                    IF productSalesTax(x) > 0 OR productSalesTax(x) < 0 THEN {
                        in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог на продажу товаров';
                        taxAmount(Tax tt, il) <- productSalesTax(x) WHERE name(tt) == 'Налог на продажу товаров';
                    }
                    IF shippingCreditsTax(x) > 0 OR shippingCreditsTax(x) < 0 THEN {
                        in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог на кредит на доставку';
                        taxAmount(Tax tt, il) <- shippingCreditsTax(x) WHERE name(tt) == 'Налог на кредит на доставку';
                    }
                    IF giftwrapCreditsTax(x) > 0 OR giftwrapCreditsTax(x) < 0 THEN {
                        in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог на подарочную упаковку';
                        taxAmount(Tax tt, il) <- giftwrapCreditsTax(x) WHERE name(tt) == 'Налог на подарочную упаковку';
                    }
                    IF promotionalRebatesTax(x) > 0 OR promotionalRebatesTax(x) < 0 THEN {
                        in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог на рекламные скидки';
                        taxAmount(Tax tt, il) <- promotionalRebatesTax(x) WHERE name(tt) == 'Налог на рекламные скидки';
                    }
                    IF marketplaceWithheldTax(x) > 0 OR marketplaceWithheldTax(x) < 0 THEN {
                        in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог, удерживаемый на рынке';
                        taxAmount(Tax tt, il) <- marketplaceWithheldTax(x) WHERE name(tt) == 'Налог, удерживаемый на рынке';
                    }

                    dataAmount(il, CustomSalesAccount aa) <- NULL;
                    IF postageCredits(x) > 0 OR postageCredits(x) < 0 THEN {
                        dataAmount(il, CustomSalesAccount aa) <- postageCredits(x) WHERE id(aa) == 'postage_credits';
                    }
                    IF giftWrapCredits(x) > 0 OR giftWrapCredits(x) < 0 THEN {
                        dataAmount(il, CustomSalesAccount aa) <- giftWrapCredits(x) WHERE id(aa) == 'gift_wrap_credits';
                    }
                    IF promotionalRebates(x) > 0 OR promotionalRebates(x) < 0 THEN {
                        dataAmount(il, CustomSalesAccount aa) <- promotionalRebates(x) WHERE id(aa) == 'promotional_rebates';
                    }
                    IF sellingFees(x) > 0 OR sellingFees(x) < 0 THEN {
                        dataAmount(il, CustomSalesAccount aa) <- sellingFees(x) WHERE id(aa) == 'selling_fees';
                    }
                    IF fbaFees(x) > 0 OR fbaFees(x) < 0 THEN {
                        dataAmount(il, CustomSalesAccount aa) <- fbaFees(x) WHERE id(aa) == 'fba_fees';
                    }
                    IF otherTransactionFees(x) > 0 OR otherTransactionFees(x) < 0 THEN {
                        dataAmount(il, CustomSalesAccount aa) <- otherTransactionFees(x) WHERE id(aa) == 'other_transaction_fees';
                    }
                    IF other(x) > 0 OR other(x) < 0 THEN {
                        dataAmount(il, CustomSalesAccount aa) <- other(x) WHERE id(aa) == 'other';
                    }
                }
            }
        }
        APPLY;
    } 
}

importInvoiceAmazon 'Импорт реализации с Амазон' (Country c) {
    DIALOG dialogDate OBJECTS d INPUT DO {
        importInvoiceAmazon(c,d);
    }
}

importInvoiceAmazon 'Импорт реализации с Амазон' () {
    DIALOG dialogDate OBJECTS d INPUT DO {
        FOR activeImportInvoiceAmazon(Country c) DO {
            importInvoiceAmazon(c,d);
        }
    }
}

EXTEND FORM integrationData
    OBJECTS cn = Country
    PROPERTIES(cn) activeImportInvoiceAmazon, name READONLY, idImportInvoiceAmazon, typeImportInvoiceAmazon
    PROPERTIES(cn) TOOLBAR importInvoiceAmazon
    FILTERGROUP activeImportInvoiceAmazon
        FILTER '{Active}' activeImportInvoiceAmazon(cn) DEFAULT
    PROPERTIES() nameAmazonInvoiceType, importInvoiceAmazon
;
DESIGN integrationData{
    optionsImport{
        MOVE PROPERTY(nameAmazonInvoiceType()) BEFORE actionImport;
        actionImport{
            MOVE PROPERTY(importInvoiceAmazon());
        }
    }
}

onStarted() + {
    IF NOT (GROUP MAX Tax tt IF name(tt) == 'Налог на продажу товаров') THEN NEW t = Tax {
        name(t) <- 'Налог на продажу товаров';
    }
    IF NOT (GROUP MAX Tax tt IF name(tt) == 'Налог на кредит на доставку') THEN NEW t = Tax {
        name(t) <- 'Налог на кредит на доставку';
    }
    IF NOT (GROUP MAX Tax tt IF name(tt) == 'Налог на подарочную упаковку') THEN NEW t = Tax {
        name(t) <- 'Налог на подарочную упаковку';
    }
    IF NOT (GROUP MAX Tax tt IF name(tt) == 'Налог на рекламные скидки') THEN NEW t = Tax {
        name(t) <- 'Налог на рекламные скидки';
    }
    IF NOT (GROUP MAX Tax tt IF name(tt) == 'Налог, удерживаемый на рынке') THEN NEW t = Tax {
        name(t) <- 'Налог, удерживаемый на рынке';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'postage_credits') THEN NEW a = CustomSalesAccount {
        id(a) <- 'postage_credits';
        name(a) <- 'Кредит на расходы по доставке';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'gift_wrap_credits') THEN NEW a = CustomSalesAccount {
        id(a) <- 'gift_wrap_credits';
        name(a) <- 'Кредит на подарочную упаковку';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'promotional_rebates') THEN NEW a = CustomSalesAccount {
        id(a) <- 'promotional_rebates';
        name(a) <- 'Скидки в рамках рекламных акций';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'selling_fees') THEN NEW a = CustomSalesAccount {
        id(a) <- 'selling_fees';
        name(a) <- 'Сборы с продаж';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'fba_fees') THEN NEW a = CustomSalesAccount {
        id(a) <- 'fba_fees';
        name(a) <- 'Сборы за доставку через Amazon';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'other_transaction_fees') THEN NEW a = CustomSalesAccount {
        id(a) <- 'other_transaction_fees';
        name(a) <- 'Другие сборы за транзакции';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'other') THEN NEW a = CustomSalesAccount {
        id(a) <- 'other';
        name(a) <- 'Другие';
    }
}