MODULE InvoiceImportGSheets;

REQUIRE ShipmentImportGSheets, InvoiceShipment, SalesLedgerInvoiceCustom, SalesLedgerAccountInvoice;

NAMESPACE Invoicing;
CLASS ImportTable 'Таблица для импорта';

eStore = DATA EStore (ImportTable);
nameEStore 'Магазин' (ImportTable t) = name(eStore(t));

country = DATA Country (ImportTable);
nameCountry 'Страна' (ImportTable t) = name(country(t));
active '{Active}' = DATA BOOLEAN (ImportTable);

marketplace = DATA Marketplace (ImportTable);
nameMarketplace 'Площадка' (ImportTable t) = name(marketplace(t));
idTable 'ID таблицы' = DATA STRING (ImportTable) CHARWIDTH 40;
typeOrder 'Тип зказа' = DATA STRING (ImportTable) CHARWIDTH 20;

customerReference '{Customer_reference}' = DATA STRING[30] (InvoiceLine) INDEXED;

EXTEND FORM invoice
    PROPERTIES(l) READONLYIF readonly(i) customerReference
;

amazonInvoiceType = DATA InvoiceType ();
nameAmazonInvoiceType 'Тип реализации для Амазон' = name(amazonInvoiceType());

//импорт реализации с Амазон
activeImportInvoiceAmazon '{Active}' = DATA BOOLEAN (Country);
idImportInvoiceAmazon 'ID таблицы' = DATA STRING (Country) CHARWIDTH 40;
typeImportInvoiceAmazon 'Тип зказа' = DATA STRING (Country) CHARWIDTH 20;

CONSTRAINT (SET(activeImportInvoiceAmazon(Country c)) OR CHANGED( idImportInvoiceAmazon(c)) OR CHANGED(typeImportInvoiceAmazon(c)))
    AND activeImportInvoiceAmazon(c) AND NOT (idImportInvoiceAmazon(c) AND typeImportInvoiceAmazon(c))
    MESSAGE 'Не заполнены ID таблицы и Тип зказа';

importProducts 'Импорт товаров' (STRING idImport, STRING interval, Category category) {
    NEWSESSION {
        getValuesRange(idImport, interval, defaultAccount());
        valuesRows(INTEGER i) <- replace(replace(replace(replace(valuesRows(i), ';', ''), '[', ''), ']', ''), '",', '";');
        LOCAL str = STRING();
        str() <- GROUP CONCAT valuesRows(INTEGER i), '\n' ORDER i;
        stringToFile(str());

        LOCAL amzModel = STRING(INTEGER);
        LOCAL baseModel = STRING(INTEGER);

        IMPORT CSV ';' NOHEADER FROM resultFile() TO amzModel, baseModel;

        LOCAL item = Item (INTEGER);
        item(INTEGER i) <- productModel(baseModel(i));

        FOR [GROUP MAX INTEGER i BY amzModel(i)](STRING[100] id) AND NOT model(id) NEW m = Model DO{
            id(m) <- id;
        }
        FOR [GROUP MAX INTEGER i BY baseModel(i)](STRING[100] id) AND NOT model(id) NEW m = Model DO{
            id(m) <- id;
        }
        FOR INTEGER x = [GROUP MAX INTEGER i BY baseModel(i)](STRING id) AND Model m = model(id) AND NOT productModel(id) NEW p = Product DO{
            product(m) <- p;
            dataName(p) <- ISTRING[200](baseModel(x));
            category(p) <- category;
        }
        FOR INTEGER x = [GROUP MAX INTEGER i BY amzModel(i)](STRING[100] id) AND Model m = model(id) AND Product p = productModel(baseModel(x)) DO{
            product(m) <- p;
        }
        
        APPLY;
    }
}

categoryByName (STRING name) = GROUP MIN Category c BY name(c);

importProductsAmazon 'Импорт товаров с Амазон' (ImportTable t){
    importProducts(idTable(t), 'SKU!A2:B', categoryByName('Телефоны'));
    importProducts(idTable(t), 'SKU!D2:E', categoryByName('Здоровье'));
    importProducts(idTable(t), 'SKU!G2:H', categoryByName('Аксессуары'));
}

importInvoiceAmazon 'Импорт реализации с Амазон' (ImportTable t, DATE date, BOOLEAN skipImportProducts) {
    NEWSESSION {
        IF NOT skipImportProducts THEN  importProductsAmazon(t);

        LOCAL str = STRING();

        LOCAL dateTime = STRING (INTEGER);
        LOCAL type = STRING(INTEGER);
        LOCAL reference = STRING(INTEGER);
        LOCAL model = STRING(INTEGER);
        LOCAL quantity = NUMERIC[16,3](INTEGER);
        LOCAL productSales = NUMERIC[14,2](INTEGER);
        LOCAL productSalesTax = NUMERIC[14,2](INTEGER);
        LOCAL postageCredits = NUMERIC[14,2](INTEGER);
        LOCAL shippingCreditsTax = NUMERIC[14,2](INTEGER);
        LOCAL giftWrapCredits = NUMERIC[14,2](INTEGER);
        LOCAL giftwrapCreditsTax = NUMERIC[14,2](INTEGER);
        LOCAL promotionalRebates = NUMERIC[14,2](INTEGER);
        LOCAL promotionalRebatesTax = NUMERIC[14,2](INTEGER);
        LOCAL marketplaceWithheldTax = NUMERIC[14,2](INTEGER);
        LOCAL sellingFees = NUMERIC[14,2](INTEGER);
        LOCAL fbaFees = NUMERIC[14,2](INTEGER);
        LOCAL otherTransactionFees = NUMERIC[14,2](INTEGER);
        LOCAL other = NUMERIC[14,2](INTEGER);
        LOCAL total = NUMERIC[14,2](INTEGER);
        LOCAL item = Item(INTEGER);
        LOCAL index = INTEGER(INTEGER);
        
        getValuesRange(idTable(t), lpad(STRING(extractMonthNumber(date)),2,'0') + '!A9:AA', defaultAccount());
        valuesRows(INTEGER i) <- replace(replace(replace(replace(replace(valuesRows(i), ';', ''), '[', ''), ']', ''), '",', ';'), '"', '');
        str() <- GROUP CONCAT valuesRows(INTEGER i), '\n' ORDER i;
        stringToFile(str());
        
        IMPORT CSV ';' NOHEADER FROM resultFile() TO dateTime = A, type = C, reference = D, model = E, quantity = G,
                                                     productSales = N, productSalesTax = O, postageCredits = P,
                                                     shippingCreditsTax = Q, giftWrapCredits = R, giftwrapCreditsTax = S,
                                                     promotionalRebates = T, promotionalRebatesTax = U,
                                                     marketplaceWithheldTax = V, sellingFees = W, fbaFees = X,
                                                     otherTransactionFees = Y, other = Z, total = AA;
        
        item(INTEGER i) <- productModel(model(i)) IF type(i) == typeOrder(t) AND toDateFormat(dateTime(i), 'MM/dd/yy') = date;
        index(INTEGER i) <- PARTITION SUM 1 ORDER i BY reference(i), item(i);
        
        IF NOT (GROUP MAX Invoice i IF date(i) == date AND type(i) == amazonInvoiceType() AND customer(i) == FBAPartner() AND eStore(i) = eStore(t) AND country(i) = country(t)) THEN NEW i = Invoice {
            dateTime(i) <- dateTimeToDateTime(date, TIME('23:59:59'));
            type(i) <- amazonInvoiceType();
            customer(i) <- FBAPartner();
            location(i) <- location('MX000004');
            ready(i) <- TRUE;
            country(i) <- country(t);
            marketplace(i) <- marketplace(t);
            eStore(i) <- eStore(t);
            //status(i) <- InvoiceStatus.draft;
        }
        FOR Invoice i == (GROUP LAST Invoice ii IF date(ii) == date AND type(ii) == amazonInvoiceType() AND customer(ii) == FBAPartner() AND eStore(i) = eStore(t) AND country(i) = country(t) ORDER dateTime(ii), ii) DO {
            LOCAL part = INTEGER(InvoiceLine);
            part(InvoiceLine l) <- PARTITION SUM 1 IF invoice(l) == i ORDER index(l), l BY invoice(l), customerReference(l), item(l);

            FOR [GROUP MAX INTEGER j BY reference(j), item(j), index(j)](STRING[30] ref, Item item, INTEGER index) AND NOT [GROUP MAX InvoiceLine l IF invoice(l) == i BY customerReference(l), item(l), part(l)](ref,item,index) NEW l = InvoiceLine DO {
                invoice(l) <- i;
                customerReference(l) <- ref;
                item(l) <- item;
                part(l) <- index;
            }
            
            FOR INTEGER x = [GROUP MAX INTEGER j BY reference(j), item(j), index(j)](STRING[30] ref, Item item, INTEGER index) AND InvoiceLine il == [GROUP MAX InvoiceLine l IF invoice(l) == i BY customerReference(l), item(l), part(l)](ref,item,index) DO {
                quantity(il) <- quantity(x);
                untaxedAmount(il) <- total(x);
                price(il) <- NUMERIC[10,2](total(x)/quantity(x));
                
                in(il, Tax tt) <- NULL;
                taxAmount(Tax tt, il) <- NULL;
                IF productSalesTax(x) > 0 OR productSalesTax(x) < 0 THEN {
                    in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог на продажу товаров';
                    taxAmount(Tax tt, il) <- productSalesTax(x) WHERE name(tt) == 'Налог на продажу товаров';
                }
                IF shippingCreditsTax(x) > 0 OR shippingCreditsTax(x) < 0 THEN {
                    in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог на кредит на доставку';
                    taxAmount(Tax tt, il) <- shippingCreditsTax(x) WHERE name(tt) == 'Налог на кредит на доставку';
                }
                IF giftwrapCreditsTax(x) > 0 OR giftwrapCreditsTax(x) < 0 THEN {
                    in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог на подарочную упаковку';
                    taxAmount(Tax tt, il) <- giftwrapCreditsTax(x) WHERE name(tt) == 'Налог на подарочную упаковку';
                }
                IF promotionalRebatesTax(x) > 0 OR promotionalRebatesTax(x) < 0 THEN {
                    in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог на рекламные скидки';
                    taxAmount(Tax tt, il) <- promotionalRebatesTax(x) WHERE name(tt) == 'Налог на рекламные скидки';
                }
                IF marketplaceWithheldTax(x) > 0 OR marketplaceWithheldTax(x) < 0 THEN {
                    in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог, удерживаемый на рынке';
                    taxAmount(Tax tt, il) <- marketplaceWithheldTax(x) WHERE name(tt) == 'Налог, удерживаемый на рынке';
                }

                dataAmount(il, CustomSalesAccount aa) <- NULL;
                IF postageCredits(x) > 0 OR postageCredits(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- -postageCredits(x) WHERE id(aa) == 'postage_credits';
                }
                IF giftWrapCredits(x) > 0 OR giftWrapCredits(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- -giftWrapCredits(x) WHERE id(aa) == 'gift_wrap_credits';
                }
                IF promotionalRebates(x) > 0 OR promotionalRebates(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- -promotionalRebates(x) WHERE id(aa) == 'promotional_rebates';
                }
                IF sellingFees(x) > 0 OR sellingFees(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- -sellingFees(x) WHERE id(aa) == 'selling_fees';
                }
                IF fbaFees(x) > 0 OR fbaFees(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- -fbaFees(x) WHERE id(aa) == 'fba_fees';
                }
                IF otherTransactionFees(x) > 0 OR otherTransactionFees(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- -otherTransactionFees(x) WHERE id(aa) == 'other_transaction_fees';
                }
                IF other(x) > 0 OR other(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- -other(x) WHERE id(aa) == 'other';
                }
            }

            FOR DATE nextDate = sum(date,1) AND lastDayOfMonth(date) == date DO {
                getValuesRange(idTable(t), lpad(STRING(extractMonthNumber(nextDate)),2,'0') + '!A9:AA', defaultAccount());
                valuesRows(INTEGER ii) <- replace(replace(replace(replace(replace(valuesRows(ii), ';', ''), '[', ''), ']', ''), '",', ';'), '"', '');
                str() <- GROUP CONCAT valuesRows(INTEGER j), '\n' ORDER i;
                stringToFile(str());

                IMPORT CSV ';' NOHEADER FROM resultFile() TO dateTime = A, type = C, reference = D, model = E, quantity = G,
                                                             productSales = N, productSalesTax = O, postageCredits = P,
                                                             shippingCreditsTax = Q, giftWrapCredits = R, giftwrapCreditsTax = S,
                                                             promotionalRebates = T, promotionalRebatesTax = U,
                                                             marketplaceWithheldTax = V, sellingFees = W, fbaFees = X,
                                                             otherTransactionFees = Y, other = Z, total = AA;

                item(INTEGER ii) <- productModel(model(ii)) IF type(ii) == typeOrder(t) AND toDateFormat(dateTime(i), 'MM/dd/yy') == date;
                index(INTEGER ii) <- PARTITION SUM 1 ORDER ii BY reference(ii), item(ii);

                FOR [GROUP MAX INTEGER j BY reference(j), item(j), index(j)](STRING[30] ref, Item item, INTEGER index) AND NOT [GROUP MAX InvoiceLine l IF invoice(l) == i BY customerReference(l), item(l), part(l)](ref,item,index) NEW l = InvoiceLine DO {
                    invoice(l) <- i;
                    customerReference(l) <- ref;
                    item(l) <- item;
                    part(l) <- index;
                }

                FOR INTEGER x = [GROUP MAX INTEGER j BY reference(j), item(j), index(j)](STRING[30] ref, Item item, INTEGER index) AND InvoiceLine il == [GROUP MAX InvoiceLine l IF invoice(l) == i BY customerReference(l), item(l), part(l)](ref,item,index) DO {
                    quantity(il) <- quantity(x);
                    untaxedAmount(il) <- total(x);
                    price(il) <- NUMERIC[10,2](total(x)/quantity(x));

                    in(il, Tax tt) <- NULL;
                    taxAmount(Tax tt, il) <- NULL;
                    IF productSalesTax(x) > 0 OR productSalesTax(x) < 0 THEN {
                        in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог на продажу товаров';
                        taxAmount(Tax tt, il) <- productSalesTax(x) WHERE name(tt) == 'Налог на продажу товаров';
                    }
                    IF shippingCreditsTax(x) > 0 OR shippingCreditsTax(x) < 0 THEN {
                        in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог на кредит на доставку';
                        taxAmount(Tax tt, il) <- shippingCreditsTax(x) WHERE name(tt) == 'Налог на кредит на доставку';
                    }
                    IF giftwrapCreditsTax(x) > 0 OR giftwrapCreditsTax(x) < 0 THEN {
                        in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог на подарочную упаковку';
                        taxAmount(Tax tt, il) <- giftwrapCreditsTax(x) WHERE name(tt) == 'Налог на подарочную упаковку';
                    }
                    IF promotionalRebatesTax(x) > 0 OR promotionalRebatesTax(x) < 0 THEN {
                        in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог на рекламные скидки';
                        taxAmount(Tax tt, il) <- promotionalRebatesTax(x) WHERE name(tt) == 'Налог на рекламные скидки';
                    }
                    IF marketplaceWithheldTax(x) > 0 OR marketplaceWithheldTax(x) < 0 THEN {
                        in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог, удерживаемый на рынке';
                        taxAmount(Tax tt, il) <- marketplaceWithheldTax(x) WHERE name(tt) == 'Налог, удерживаемый на рынке';
                    }

                    dataAmount(il, CustomSalesAccount aa) <- NULL;
                    IF postageCredits(x) > 0 OR postageCredits(x) < 0 THEN {
                        dataAmount(il, CustomSalesAccount aa) <- -postageCredits(x) WHERE id(aa) == 'postage_credits';
                    }
                    IF giftWrapCredits(x) > 0 OR giftWrapCredits(x) < 0 THEN {
                        dataAmount(il, CustomSalesAccount aa) <- -giftWrapCredits(x) WHERE id(aa) == 'gift_wrap_credits';
                    }
                    IF promotionalRebates(x) > 0 OR promotionalRebates(x) < 0 THEN {
                        dataAmount(il, CustomSalesAccount aa) <- -promotionalRebates(x) WHERE id(aa) == 'promotional_rebates';
                    }
                    IF sellingFees(x) > 0 OR sellingFees(x) < 0 THEN {
                        dataAmount(il, CustomSalesAccount aa) <- -sellingFees(x) WHERE id(aa) == 'selling_fees';
                    }
                    IF fbaFees(x) > 0 OR fbaFees(x) < 0 THEN {
                        dataAmount(il, CustomSalesAccount aa) <- -fbaFees(x) WHERE id(aa) == 'fba_fees';
                    }
                    IF otherTransactionFees(x) > 0 OR otherTransactionFees(x) < 0 THEN {
                        dataAmount(il, CustomSalesAccount aa) <- -otherTransactionFees(x) WHERE id(aa) == 'other_transaction_fees';
                    }
                    IF other(x) > 0 OR other(x) < 0 THEN {
                        dataAmount(il, CustomSalesAccount aa) <- -other(x) WHERE id(aa) == 'other';
                    }
                }
            }
        }
        APPLY;
    } 
}

importInvoiceAmazon 'Импорт реализации с Амазон' (ImportTable t, DATE date){
    importInvoiceAmazon(t, date, NULL);
}

importInvoiceAmazon 'Импорт реализации с Амазон' (ImportTable t) {
    DIALOG dialogDate OBJECTS d INPUT DO {
        IF marketplace(t) = Marketplace.amazon THEN importInvoiceAmazon(t, d);
        ELSE MESSAGE 'Только для Amazon';
    }
}

importInvoiceAmazon 'Импорт реализации с Амазон' () {
    DIALOG dialogDate OBJECTS d INPUT DO {
        FOR active(ImportTable t) AND marketplace(t) = Marketplace.amazon DO {
            importInvoiceAmazon(t, d);
        }
    }
}

EXTEND FORM integrationData
    OBJECTS it = ImportTable
    PROPERTIES (it) nameMarketplace, nameCountry, nameEStore, idTable, typeOrder, active
    PROPERTIES(it) TOOLBAR importInvoiceAmazon, importProductsAmazon
    PROPERTIES (it) NEW, EDIT, DELETE
    PROPERTIES() nameAmazonInvoiceType, importInvoiceAmazon
;
DESIGN integrationData{
    optionsImport{
        MOVE PROPERTY(nameAmazonInvoiceType()) BEFORE actionImport;
        actionImport{
            MOVE PROPERTY(importInvoiceAmazon());
        }
    }
}

onStarted() + {
    IF NOT (GROUP MAX Tax tt IF name(tt) == 'Налог на продажу товаров') THEN NEW t = Tax {
        name(t) <- 'Налог на продажу товаров';
    }
    IF NOT (GROUP MAX Tax tt IF name(tt) == 'Налог на кредит на доставку') THEN NEW t = Tax {
        name(t) <- 'Налог на кредит на доставку';
    }
    IF NOT (GROUP MAX Tax tt IF name(tt) == 'Налог на подарочную упаковку') THEN NEW t = Tax {
        name(t) <- 'Налог на подарочную упаковку';
    }
    IF NOT (GROUP MAX Tax tt IF name(tt) == 'Налог на рекламные скидки') THEN NEW t = Tax {
        name(t) <- 'Налог на рекламные скидки';
    }
    IF NOT (GROUP MAX Tax tt IF name(tt) == 'Налог, удерживаемый на рынке') THEN NEW t = Tax {
        name(t) <- 'Налог, удерживаемый на рынке';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'postage_credits') THEN NEW a = CustomSalesAccount {
        id(a) <- 'postage_credits';
        name(a) <- 'Кредит на расходы по доставке';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'gift_wrap_credits') THEN NEW a = CustomSalesAccount {
        id(a) <- 'gift_wrap_credits';
        name(a) <- 'Кредит на подарочную упаковку';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'promotional_rebates') THEN NEW a = CustomSalesAccount {
        id(a) <- 'promotional_rebates';
        name(a) <- 'Скидки в рамках рекламных акций';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'selling_fees') THEN NEW a = CustomSalesAccount {
        id(a) <- 'selling_fees';
        name(a) <- 'Сборы с продаж';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'fba_fees') THEN NEW a = CustomSalesAccount {
        id(a) <- 'fba_fees';
        name(a) <- 'Сборы за доставку через Amazon';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'other_transaction_fees') THEN NEW a = CustomSalesAccount {
        id(a) <- 'other_transaction_fees';
        name(a) <- 'Другие сборы за транзакции';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'other') THEN NEW a = CustomSalesAccount {
        id(a) <- 'other';
        name(a) <- 'Другие';
    }
}

ebayInvoiceType = DATA InvoiceType ();
nameEbayInvoiceType 'Тип реализации для eBay' = name(ebayInvoiceType());

//импорт реализации с eBay
activeImportInvoiceEbay '{Active}' = DATA BOOLEAN (Country);
idImportInvoiceEbay 'ID таблицы' = DATA STRING (Country) CHARWIDTH 40;
typeImportInvoiceEbay 'Тип зказа' = DATA STRING (Country) CHARWIDTH 20;

CONSTRAINT (SET(activeImportInvoiceEbay(Country c)) OR CHANGED( idImportInvoiceEbay(c)) OR CHANGED(typeImportInvoiceEbay(c)))
    AND activeImportInvoiceEbay(c) AND NOT (idImportInvoiceEbay(c) AND typeImportInvoiceEbay(c))
    MESSAGE 'Не заполнены ID таблицы и Тип заказа';

importProductsEbay 'Импорт товаров с eBay' (ImportTable t){
    importProducts(idTable(t), 'SKU!A2:B', categoryByName('Телефоны'));
    importProducts(idTable(t), 'SKU!D2:E', categoryByName('Здоровье'));
    importProducts(idTable(t), 'SKU!G2:H', categoryByName('Аксессуары'));
}

importInvoiceEbay 'Импорт реализации с eBay' (ImportTable t, DATE date, BOOLEAN skipImportProducts) {
    IF NOT skipImportProducts THEN  importProductsEbay(t);

    NEWSESSION {
        getValuesRange(idTable(t), 'SKU!A2:B', defaultAccount());
        valuesRows(INTEGER i) <- replace(replace(replace(replace(valuesRows(i), ';', ''), '[', ''), ']', ''), '",', '";');
        LOCAL str = STRING();
        str() <- GROUP CONCAT valuesRows(INTEGER i), '\n' ORDER i;
        stringToFile(str());

        LOCAL amzModel = STRING(INTEGER);
        LOCAL baseModel = STRING(INTEGER);

        IMPORT CSV ';' NOHEADER FROM resultFile() TO amzModel, baseModel;

        LOCAL date = DATE(INTEGER);
        LOCAL type = STRING(INTEGER);
        LOCAL reference = STRING(INTEGER);
        LOCAL article = STRING(INTEGER);
        LOCAL model = STRING(INTEGER);
        LOCAL quantity = NUMERIC[16,3](INTEGER);
        LOCAL sum = NUMERIC[14,2](INTEGER);
        LOCAL productSales = NUMERIC[14,2](INTEGER);
        LOCAL packagingAndShipping = NUMERIC[14,2](INTEGER);
        LOCAL sellerTax = NUMERIC[14,2](INTEGER);
        LOCAL ebayTax = NUMERIC[14,2](INTEGER);
        LOCAL fixedSalesCommission = NUMERIC[14,2](INTEGER);
        LOCAL variableSalesCommission = NUMERIC[14,2](INTEGER);
        LOCAL highRateOfNotDescribedItemsFee = NUMERIC[14,2](INTEGER);
        LOCAL belowAverageServiceFees = NUMERIC[14,2](INTEGER);
        LOCAL internationalFees = NUMERIC[14,2](INTEGER);
        LOCAL charityDonation = NUMERIC[14,2](INTEGER);
        LOCAL total = NUMERIC[14,2](INTEGER);
        LOCAL item = Item(INTEGER);
        LOCAL index = INTEGER(INTEGER);

        getValuesRange(idTable(t), lpad(STRING(extractMonthNumber(date)),2,'0') + '!A2:AH', defaultAccount());
        valuesRows(INTEGER i) <- replace(replace(replace(replace(replace(valuesRows(i), ';', ''), '[', ''), ']', ''), '",', ';'), '"', '');
        str() <- GROUP CONCAT valuesRows(INTEGER i), '\n' ORDER i;
        stringToFile(str());

        IMPORT CSV ';' NOHEADER FROM resultFile() TO date = A, type = B, reference = C, article = R, model = U, quantity = V,
                                                     sum = W, productSales = K, packagingAndShipping = X, sellerTax = Y,
                                                     ebayTax = Z, fixedSalesCommission = AB, variableSalesCommission = AC,
                                                     highRateOfNotDescribedItemsFee = AD, belowAverageServiceFees = AE,
                                                     internationalFees = AF, charityDonation = AG, total = AH;

        item(INTEGER i) <- productModel((GROUP MAX baseModel(INTEGER j) IF amzModel(j) == model(i))) IF type(i) == typeOrder(t) AND date(i) == date;
        index(INTEGER i) <- PARTITION SUM 1 ORDER i BY reference(i), item(i);

        IF NOT (GROUP MAX Invoice i IF date(i) == date AND type(i) == ebayInvoiceType() AND customer(i) == FBAPartner() AND eStore(i) = eStore(t) AND country(i) = country(t)) THEN NEW i = Invoice {
            dateTime(i) <- dateTimeToDateTime(date, TIME('23:59:59'));
            type(i) <- ebayInvoiceType();
            customer(i) <- FBAPartner();
            location(i) <- location('MX000004');
            country(i) <- country(t);
            marketplace(i) <- marketplace(t);
            eStore(i) <- eStore(t);
            //status(i) <- InvoiceStatus.draft;
        }
        FOR Invoice i == (GROUP LAST Invoice ii IF date(ii) == date AND type(ii) == ebayInvoiceType() AND customer(ii) == FBAPartner() AND eStore(i) = eStore(t) AND country(i) = country(t) ORDER dateTime(ii), ii) DO {
            LOCAL part = INTEGER(InvoiceLine);
            part(InvoiceLine l) <- PARTITION SUM 1 IF invoice(l) == i ORDER index(l), l BY invoice(l), customerReference(l), item(l);

            FOR [GROUP MAX INTEGER j BY reference(j), item(j), index(j)](STRING[30] ref, Item item, INTEGER index) AND NOT [GROUP MAX InvoiceLine l IF invoice(l) == i BY customerReference(l), item(l), part(l)](ref,item,index) NEW l = InvoiceLine DO {
                invoice(l) <- i;
                customerReference(l) <- ref;
                item(l) <- item;
                part(l) <- index;
            }

            FOR INTEGER x = [GROUP MAX INTEGER j BY reference(j), item(j), index(j)](STRING[30] ref, Item item, INTEGER index) AND InvoiceLine il == [GROUP MAX InvoiceLine l IF invoice(l) == i BY customerReference(l), item(l), part(l)](ref,item,index) DO {
                quantity(il) <- quantity(x);
                untaxedAmount(il) <- sum(x);
                price(il) <- NUMERIC[10,2](sum(x)/quantity(x));

                in(il, Tax tt) <- NULL;
                taxAmount(Tax tt, il) <- NULL;
                IF sellerTax(x) > 0 OR sellerTax(x) < 0 THEN {
                    in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог, взимаемый продавцом';
                    taxAmount(Tax tt, il) <- -sellerTax(x) WHERE name(tt) == 'Налог, взимаемый продавцом';
                }
                IF ebayTax(x) > 0 OR ebayTax(x) < 0 THEN {
                    in(il, Tax tt) <- TRUE WHERE name(tt) == 'Налог, взимаемый eBay';
                    taxAmount(Tax tt, il) <- -ebayTax(x) WHERE name(tt) == 'Налог, взимаемый eBay';
                }
                IF internationalFees(x) > 0 OR internationalFees(x) < 0 THEN {
                    in(il, Tax tt) <- TRUE WHERE name(tt) == 'Международный сбор';
                    taxAmount(Tax tt, il) <- -internationalFees(x) WHERE name(tt) == 'Международный сбор';
                }

                dataAmount(il, CustomSalesAccount aa) <- NULL;
                IF packagingAndShipping(x) > 0 OR packagingAndShipping(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- -packagingAndShipping(x) WHERE id(aa) == 'packaging_and_shipping';
                }
                IF fixedSalesCommission(x) > 0 OR fixedSalesCommission(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- -fixedSalesCommission(x) WHERE id(aa) == 'fixed_sales_commission';
                }
                IF variableSalesCommission(x) > 0 OR variableSalesCommission(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- -variableSalesCommission(x) WHERE id(aa) == 'variable_sales_commission';
                }
                IF highRateOfNotDescribedItemsFee(x) > 0 OR highRateOfNotDescribedItemsFee(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- -highRateOfNotDescribedItemsFee(x) WHERE id(aa) == 'high_rate_of_not_described_items_fees';
                }
                IF belowAverageServiceFees(x) > 0 OR belowAverageServiceFees(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- -belowAverageServiceFees(x) WHERE id(aa) == 'below_average_service_fees';
                }
                IF charityDonation(x) > 0 OR charityDonation(x) < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- -charityDonation(x) WHERE id(aa) == 'charity_donation';
                }
                LOCAL other = NUMERIC[14,2]();
                other() <- (GROUP SUM total(INTEGER j) IF date(j) == date(x) AND reference(j) == reference(x) AND article(j) == article(x) AND type(j) == 'Andere Gebühr');
                IF other() > 0 OR other() < 0 THEN {
                    dataAmount(il, CustomSalesAccount aa) <- other() WHERE id(aa) == 'other_fees';
                }
            }
        }
        APPLY;
    }
}

importInvoiceEbay 'Импорт реализации с eBay' (ImportTable t, DATE date) {
    importInvoiceEbay(t, date, NULL);
}

importInvoiceEbay 'Импорт реализации с eBay' (ImportTable t) {
    DIALOG dialogDate OBJECTS d INPUT DO {
        IF marketplace(t) = Marketplace.ebay THEN importInvoiceEbay(t, d);
        ELSE MESSAGE 'Только для ebay';
    }
}

importInvoiceEbay 'Импорт реализации с eBay' () {
    DIALOG dialogDate OBJECTS d INPUT DO {
        FOR active(ImportTable t) AND marketplace(t) = Marketplace.ebay DO {
            importInvoiceEbay(t, d);
        }
    }
}

EXTEND FORM integrationData
    PROPERTIES(it) TOOLBAR importInvoiceEbay
    PROPERTIES() nameEbayInvoiceType, importInvoiceEbay
;
DESIGN integrationData{
    optionsImport{
        MOVE PROPERTY(nameEbayInvoiceType()) BEFORE actionImport;
        actionImport{
            MOVE PROPERTY(importInvoiceEbay());
        }
    }
}

onStarted() + {
    IF NOT (GROUP MAX Tax tt IF name(tt) == 'Налог, взимаемый продавцом') THEN NEW t = Tax {
        name(t) <- 'Налог, взимаемый продавцом';
    }
    IF NOT (GROUP MAX Tax tt IF name(tt) == 'Налог, взимаемый eBay') THEN NEW t = Tax {
        name(t) <- 'Налог, взимаемый eBay';
    }
    IF NOT (GROUP MAX Tax tt IF name(tt) == 'Международный сбор') THEN NEW t = Tax {
        name(t) <- 'Международный сбор';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'packaging_and_shipping') THEN NEW a = CustomSalesAccount {
        id(a) <- 'packaging_and_shipping';
        name(a) <- 'Упаковка и доставка';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'fixed_sales_commission') THEN NEW a = CustomSalesAccount {
        id(a) <- 'fixed_sales_commission';
        name(a) <- 'Фиксированная часть комиссии за продажу';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'variable_sales_commission') THEN NEW a = CustomSalesAccount {
        id(a) <- 'variable_sales_commission';
        name(a) <- 'Переменная часть комиссии за продажу';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'high_rate_of_not_described_items_fees') THEN NEW a = CustomSalesAccount {
        id(a) <- 'high_rate_of_not_described_items_fees';
        name(a) <- 'Вознаграждение за очень высокий процент "товаров, не соответствующих описанию"';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'below_average_service_fees') THEN NEW a = CustomSalesAccount {
        id(a) <- 'below_average_service_fees';
        name(a) <- 'Плата за обслуживание на уровне ниже среднего';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'charity_donation') THEN NEW a = CustomSalesAccount {
        id(a) <- 'charity_donation';
        name(a) <- 'Благотворительное пожертвование';
    }
    IF NOT (GROUP MAX CustomSalesAccount aa IF id(aa) == 'other_fees') THEN NEW a = CustomSalesAccount {
        id(a) <- 'other_fees';
        name(a) <- 'Другая плата';
    }
}

onStarted()+{
    IF NOT categoryByName('Телефоны') THEN NEW cc = Category{
        name(cc) <- 'Телефоны';
        parent(cc) <- GROUP MIN Category c IF name(c) == 'Все';
    }
    IF NOT categoryByName('Здоровье') THEN NEW cc = Category{
        name(cc) <- 'Здоровье';
        parent(cc) <- GROUP MIN Category c IF name(c) == 'Все';
    }
    IF NOT categoryByName('Аксессуары') THEN NEW cc = Category{
        name(cc) <- 'Аксессуары';
        parent(cc) <- GROUP MIN Category c IF name(c) == 'Все';
    }
}