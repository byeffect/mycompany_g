MODULE SupplierImportGsheets;

REQUIRE ServiceAccountGoogle, ProductModel, ReceiptPackageLot, LocationProduct, ReceiptDone, ReceiptLot;

NAMESPACE Inventory;

isDefault 'По умолчанию' = DATA BOOLEAN (ServiceGoogleAccount);

WHEN LOCAL SET (isDefault(ServiceGoogleAccount a)) DO isDefault(ServiceGoogleAccount aa) <- NULL WHERE aa != a;

EXTEND FORM integrationData
    PROPERTIES (serviceAccount) isDefault
;
defaultAccount = GROUP MAX ServiceGoogleAccount a IF isDefault(a);

//импорт тваров ghseets
idImportItemsGsheets 'ID таблицы импорта товаров' = DATA STRING ();

importItemsGsheets 'Импорт товаров ghseets'(){
    NEWSESSION {
        LOCAL id = STRING(INTEGER);
        LOCAL type = STRING(INTEGER);
        LOCAL address = STRING(INTEGER);
        LOCAL name = STRING(INTEGER);

        getValuesRange(idImportItemsGsheets(), 'SKU!A3:D', defaultAccount());
        valuesRows(INTEGER i) <- replace(replace(valuesRows(i), '[', ''), ']', '');
        LOCAL str = STRING();
        str() <- GROUP CONCAT valuesRows(INTEGER i), '\n' ORDER i;
        stringToFile(str());
        IMPORT CSV ',' NOHEADER FROM resultFile() TO id, type, address, name;

        FOR [GROUP MAX INTEGER i BY id(i)](STRING[100] id) AND NOT model(id) NEW m = Model DO{
            id(m) <- id;
        }
        FOR INTEGER x = [GROUP MAX INTEGER i BY id(i)](STRING id) AND name(x) AND Model m = model(id) AND NOT productModel(id) NEW p = Product DO{
            product(m) <- p;
        }
        FOR INTEGER x = [GROUP MAX INTEGER i BY id(i)](STRING id) AND name(x) AND Product p = productModel(id) DO{
            dataName(p) <- name(x);
            category(p) <- GROUP MAX Category c IF c IS Category;
        }
        APPLY;
    }
}

imei = DATA LOCAL STRING(INTEGER);
model = DATA LOCAL STRING (INTEGER);
techName = DATA LOCAL STRING (INTEGER);
date = DATA LOCAL STRING (INTEGER);
box = DATA LOCAL STRING (INTEGER);
dateBox = DATA LOCAL STRING (INTEGER);

line (Receipt r, Product p) = GROUP MAX ReceiptLine l BY receipt(l), product(l);
packageLineLot (Package p, Lot lot) = GROUP MAX PackageLine l BY package(l), lot(l);
receiptVendor(STRING reference) = GROUP MAX Receipt r IF vendorReference(r) = reference AND NOT done(r);

idImportSupplier'ID таблицы импорта поставщиков' = DATA STRING ();

importSupplier2 'Импорт данных поставщика 2'(){
    NEWSESSION {
        getValuesRange(idImportSupplier(), 'Поставщик 2!A3:F', defaultAccount());
        valuesRows(INTEGER i) <- replace(replace(valuesRows(i), '[', ''), ']', '');
        LOCAL str = STRING();
        str() <- GROUP CONCAT valuesRows(INTEGER i), '\n' ORDER i;
        stringToFile(str());
        IMPORT CSV ','  NOHEADER FROM resultFile() TO imei, model, techName, date, box, dateBox;
        FOR [GROUP MAX INTEGER i BY model(i)](STRING[100] model) AND NOT model(model) NEW m = Model DO{
            id(m) <- model;
        }

        FOR INTEGER x = [GROUP MAX INTEGER i BY imei(i)](STRING imei) AND NOT lot(imei) AND Product p = productModel(model(x)) NEW l = Lot DO{
            id(l) <- imei;
        }
        FOR INTEGER x = [GROUP MAX INTEGER i BY imei(i)](STRING imei) AND Lot l = lot(imei) AND Product p = productModel(model(x)) DO{
            product(l) <- p;
        }

        //создание приемок
        FOR [GROUP MAX INTEGER i BY box(i)](STRING box) AND NOT receiptVendor(box) NEW r = Receipt DO{
            vendorReference(r) <- box;
            type(r) <- receiptType('receipt');
        }

        //создание строк приемки
        FOR INTEGER x = [GROUP MAX INTEGER i BY model(i), box(i)](STRING model, STRING box) AND Receipt r = receiptVendor(box) AND Product p = productModel(model) AND NOT line(r, p) NEW l = ReceiptLine DO{
            product(l) <- p;
            receipt(l) <- r;
        }
        FOR INTEGER x = [GROUP MAX INTEGER i BY imei(i)](STRING imei) AND Receipt r = receiptVendor(box(x)) AND Lot lot = lot(imei) AND ReceiptLine l = line(r, product(lot)) DO{
            initialDemand(l, lot) <- 1;
        }

        FOR INTEGER x = [GROUP MAX INTEGER i BY model(i), box(i)](STRING model, STRING box) AND Receipt r = receiptVendor(box) AND Product p = productModel(model) AND ReceiptLine l = line(r, p)  DO{
            initialDemand(l) <- GROUP SUM 1 IF initialDemand(l, Lot lot);
        }
        
        APPLY;
    }
}
EXTEND FORM integrationData
    PROPERTIES() importItemsGsheets, importSupplier2, idImportItemsGsheets, idImportSupplier
;

DESIGN integrationData{
    serviceAccountsGoogle{
        NEW optionsImport{
            caption = 'Настройки импорта';
            MOVE PROPERTY (idImportItemsGsheets());
            MOVE PROPERTY (idImportSupplier());
            NEW actionImport{
                caption = 'Действия';
                horizontal = TRUE;
                MOVE PROPERTY (importItemsGsheets());
                MOVE PROPERTY (importSupplier2());
            }
        }
    }
}


//импорт размещений
importLocation(){
    NEWSESSION {
        LOCAL id = STRING(INTEGER);
        LOCAL type = STRING(INTEGER);
        LOCAL address = STRING(INTEGER);
        LOCAL name = STRING(INTEGER);

        getValuesRange(idImportItemsGsheets(), 'SKU!A3:D', defaultAccount());
        valuesRows(INTEGER i) <- replace(replace(valuesRows(i), '[', ''), ']', '');
        LOCAL str = STRING();
        str() <- GROUP CONCAT valuesRows(INTEGER i), '\n' ORDER i;
        stringToFile(str());
        IMPORT CSV ',' NOHEADER FROM resultFile() TO id, type, address, name;

        FOR INTEGER x = [GROUP MAX INTEGER i BY address(i)](STRING[100] id) AND NOT location(id) AND Product p = productModel(id(x)) NEW l = Location DO{
            id(l) <- id;
        }
        
        FOR INTEGER x = [GROUP MAX INTEGER i BY address(i)](STRING[100] id) AND Location l = location(id) AND Product p = productModel(id(x)) DO{
            name(l) <- id;
            location(l, p) <- l;
        }
        APPLY;
    }
 
}