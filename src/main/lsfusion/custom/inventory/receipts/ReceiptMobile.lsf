MODULE ReceiptMobile;

REQUIRE ReceiptDone, ReceiptPackage, ReceiptLot, PackageLot, ReceiptScan, InventoryCustom, LotCustom, Mobile, Icon, Sound;

NAMESPACE Inventory;

readonlyReceipt = DATA LOCAL BOOLEAN ();

htmlReceipt '' (Receipt r) = HTML (CONCAT '&nbsp;', '<b>' + vendorReference(r) + '</b>', '<font size="-2">' + number(r) + '</font>', toChar(scheduledDate(r), 'DD/MM'), '<font size="-1">' + nameVendor(r) + '</font>');

htmlReceipt '' (ReceiptLine l) = HTML ('<div>' + (CONCAT '&nbsp;', '<b>' + nameProduct(l) + '</b>', '<font size="-2">' + INTEGER(initialDemand(l)) + '</font>') + '</div>');

htmlReceipt '' (PackageLine l) = HTML ('<div>' + (CONCAT '&nbsp;', '<b>' + nameProduct(l) + '</b>', '<font size="-2">' + idLot(l) + '</font>') + '</div>');

htmlReceipt '' (Lot l) = HTML ('<div>' + (CONCAT '&nbsp;', '<b>' + nameProduct(l) + '</b>', '<font size="-2">' + id(l) + '</font>', '(' + idDefaultModelProduct(l) + ')') + '</div>');

htmlReceipt '' (ReceiptScan l) = HTML ('<div>' + (CONCAT '&nbsp;',
    time(l),
    nameUser(l),
    '<b>' + nameProduct(l) + '</b>',
    '<font size="-2">' + idLot(l) + '</font>',
    '(' + idDefaultModel(product(l)) + ')',
    '<i>' + referencePackage(l) + '</i>',
    '<u>' + nameLocation(l) + '</u>') + '</div>');

notReceivedOn 'Не принятые' = DATA LOCAL NESTED BOOLEAN ();

// Форма приемки
FORM receiptMobile
    OBJECTS r = Receipt PANEL
    PROPERTIES(r) READONLY htmlReceipt

    OBJECTS p = Package NULL PANEL
    PROPERTIES(p) READONLY reference
    FILTERS in(r, p)

    OBJECTS s = ReceiptScan
    PROPERTIES(s) READONLY htmlReceipt
    PROPERTIES(s) READONLY nameLocation PANEL
    PROPERTIES(s) NEWSESSION deleteScan = DELETE SHOWIF NOT readonlyReceipt()
    FILTERS receipt(s) = r

    OBJECTS pc = Package
    PROPERTIES READONLY BACKGROUND IF quantity(pc) = quantityScan(r, pc) THEN RGB(212,255,212) ELSE
                                   IF quantityScan(r, pc) THEN RGB(255,255,212)
                        reference(pc), quantity(pc), quantityScan(r, pc) 
    FILTERS in(r, pc)

    OBJECTS pl = PackageLine
    PROPERTIES(pl) READONLY htmlReceipt BACKGROUND RGB(212,255,212) IF scan(r, lot(pl))
    FILTERS package(pl) = p
    
    OBJECTS lt = (rl = ReceiptLine, lt = Lot)
    PROPERTIES(lt) READONLY htmlReceipt BACKGROUND RGB(212,255,212) IF scan(r, lt)
    ORDERS htmlReceipt(lt)
//    FILTERGROUP scanned
//        FILTER 'Не принятые' NOT scan(r, lt)
    FILTERS receipt(rl) = r, initialDemand(rl, lt) 
    
    PROPERTIES notReceivedOn()
    FILTERS NOT scan(r, lt) OR NOT notReceivedOn()
;

DESIGN receiptMobile {
    caption = badged('', number(r));
    OBJECTS {
        class = '';
        MOVE PROPERTY(htmlReceipt(r)) {
            caption = '';
            alignment = STRETCH;
            focusable = FALSE;
        }
        REMOVE BOX(r);

        MOVE PROPERTY(reference(p)) {
            caption = 'Упаковка';
            alignment = STRETCH;
            focusable = FALSE;
        }

        NEW pane {
            fill = 1;
            tabbed = TRUE;
            NEW scans {
                caption = badged('Принято', countScan(r));
                MOVE GRID(s) {
                    PROPERTY(htmlReceipt(r)) { valueClass = 'myclass'; }
                }
                REMOVE BOX(s);
                MOVE PROPERTY(deleteScan) { alignment = STRETCH; }
            }
            NEW packageContent {
                showIf = countPackages(r);
                caption = badged('В коробе', countLines(p));
                MOVE GRID(pl);
                REMOVE BOX(pl);
            }
            NEW packages {
                showIf = countPackages(r);
                caption = badged('Упаковки', countPackages(r));
                MOVE GRID(pc);
                REMOVE BOX(pc);
            }
            NEW receiptContent {
                caption = badged('Содержимое', INTEGER(initialDemandLot(r)));
                MOVE PROPERTY(notReceivedOn());
                MOVE GRID(lt);
                REMOVE BOX(lt);
            }
        }
        MOVE PROPERTY(nameLocation(s)) {
            caption = 'Место хранения';
            focusable = FALSE;
        }
    }
    REMOVE TOOLBARBOX;
}

selectPackage 'Выбрать' (Package p) {
    SEEK receiptMobile.p = p;
    ACTIVATE TAB receiptMobile.packageContent;
}

EXTEND FORM receiptMobile
    PROPERTIES(pc) selectPackage
;
DESIGN receiptMobile {
    packages {
        MOVE PROPERTY(selectPackage(pc)) { alignment = STRETCH; }
    }
}

createLots 'Создавать партии' = DATA BOOLEAN (ReceiptType);
EXTEND FORM receiptType PROPERTIES(o) createLots;

FORM selectReceiptLine 'Выберите товар'
    OBJECTS r = Receipt PANEL
    OBJECTS l = ReceiptLine
    PROPERTIES(l) READONLY htmlReceipt
    FILTERS receipt(l) = r
;

DESIGN selectReceiptLine {
    OBJECTS {
        MOVE GRID(l);
        REMOVE BOX(l);
    }
}

// scan
scanBarcode(Receipt r, Package p, ReceiptScan rs) {
    INPUT bn = NUMERIC DO
        FOR STRING b = STRING(bn) DO 
            IF packageReference(r, b) THEN {
                SEEK receiptMobile.p = packageReference(r, b);
            } ELSE {
                IF countPackages(r) AND NOT p THEN {
                    beep(warningSound(), TRUE);
                    MESSAGE 'Не выбрана упаковка. Сначала просканируйте ее.';
                } ELSE {
                    IF NOT lot(b) THEN {
                        IF NOT location(b) OR NOT rs THEN {
                            beep(warningSound(), TRUE);
                            IF createLots(type(r)) THEN {
                                IF (GROUP SUM 1 IF receipt(ReceiptLine l) == r) == 1 THEN {
                                    FOR ReceiptLine l == GROUP MAX ReceiptLine rl IF receipt(rl) == r DO {
                                        ASK 'Создать партию для ' + nameProduct(l) + '?' DO {
                                            NEW lot = Lot {
                                                id(lot) <- b;
                                                product(lot) <- product(l);
                                                APPLY;
                                            }
                                        }
                                    }
                                } ELSE 
                                DIALOG selectReceiptLine OBJECTS r = r, l INPUT DO
                                    IF l THEN NEWSESSION {
                                        NEW lot = Lot {
                                            id(lot) <- b;
                                            product(lot) <- product(l);
                                            APPLY;
                                        }
                                    }
                            } ELSE
                                MESSAGE 'Не найден код партии';
                            
                        } ELSE {
                            NEWSESSION APPLY { location(rs) <- location(b); }
                            IF NOT canceled() THEN beep(infoSound(), TRUE);
                        }
                    }
                    IF lot(b) THEN {
                        IF scan(r, lot(b)) THEN {
                            beep(warningSound(), TRUE);
                            MESSAGE 'Код партии уже был принят';
                        } ELSE {
                            IF countPackages(r) AND NOT GROUP SUM 1 IF package(PackageLine pl) = p AND lot(pl) = lot(b) THEN {
                                beep(warningSound(), TRUE);
                                MESSAGE 'Этой партии не должно быть в текущей упаковке';
                            } ELSE {
//                                IF NOT countPackages(r) AND NOT GROUP SUM 1 IF (initialDemand(ReceiptLine l, lot(b)) OR 
//                                                                                (createLots(type(r)) AND product(l) = product(lot(b)))) 
//                                                                            AND receipt(l) = r THEN {
//                                    beep(warningSound(), TRUE);
//                                    MESSAGE 'Этой партии не должно быть в текущей приемке';
//                                } ELSE
                                    NEWSESSION {
                                        NEW s = ReceiptScan {
                                            receipt(s) <- r;
                                            package(s) <- p;
                                            lot(s) <- lot(b);
                                            SEEK receiptMobile.s = s;
                                        }
                                        APPLY;
                                        IF NOT canceled() THEN beep(successSound(), TRUE);
                                    }
                            }
                        }
                    }
                }
            }
}

EXTEND FORM receiptMobile
    PROPERTIES() barcodeNumeric ON CHANGE scanBarcode(r, p, s) SHOWIF NOT readonlyReceipt()
;
DESIGN receiptMobile {
    OBJECTS {
        MOVE PROPERTY(barcodeNumeric()) AFTER PROPERTY(htmlReceipt(r)) {
            caption = '';
            placeholder = 'Введите штрих-код';
            alignment = STRETCH;
        }
    }
}
